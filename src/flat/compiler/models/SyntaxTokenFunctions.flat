package flat/compiler/models

class {
  static Token START_BRACE = Token(type: Token.Type.SYMBOL, value: "{")
  static Token END_BRACE = Token(type: Token.Type.SYMBOL, value: "}")
  static Token START_PARENTHESIS = Token(type: Token.Type.SYMBOL, value: "(")
  static Token END_PARENTHESIS = Token(type: Token.Type.SYMBOL, value: ")")

  public static splitOnTopLevel(Token[] tokens, Token splitToken) -> Token[][] {
    let splitTokens = Token[][]
    splitTokens.add(Token[])

    var Int i = 0

    while (i < tokens.count) {
      Token token = tokens[i]

      if (token.type == splitToken.type && token.value == splitToken.value) {
        splitTokens.add(Token[])
        i++
        continue
      }

      var Int endIndex = i + 1

      match token.value {
        "{" => endIndex = findTokenOnTopLevel(tokens, END_BRACE, i) + 1
        "(" => endIndex = findTokenOnTopLevel(tokens, END_PARENTHESIS, i) + 1
      }

      for (var Int n = i; n < endIndex; n++) {
        splitTokens.last.add(tokens[n])
      }

      i = endIndex
    }

    return splitTokens
  }

  public static findTokenOnTopLevel(Token[] tokens, Token targetToken, Int index = 0) -> Int => -1 {
    var Int i = index + 1

    while (i > 0 && i < tokens.count) {
      let token = tokens[i]

      match token.value {
        targetToken.value => return i
        "{" => i = findTokenOnTopLevel(tokens, END_BRACE, i) + 1
        "(" => i = findTokenOnTopLevel(tokens, END_PARENTHESIS, i) + 1
        default => i++
      }
    }
  }
}